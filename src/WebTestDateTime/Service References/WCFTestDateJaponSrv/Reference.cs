//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.19462
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebTestDateTime.WCFTestDateJaponSrv {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/WCFTestDate")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WebTestDateTime.WCFTestDateJaponSrv.CompositeTypeLite compositeTypeLiteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string compositeTypeLiteSerializedField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WebTestDateTime.WCFTestDateJaponSrv.CompositeTypeLite compositeTypeLite {
            get {
                return this.compositeTypeLiteField;
            }
            set {
                if ((object.ReferenceEquals(this.compositeTypeLiteField, value) != true)) {
                    this.compositeTypeLiteField = value;
                    this.RaisePropertyChanged("compositeTypeLite");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string compositeTypeLiteSerialized {
            get {
                return this.compositeTypeLiteSerializedField;
            }
            set {
                if ((object.ReferenceEquals(this.compositeTypeLiteSerializedField, value) != true)) {
                    this.compositeTypeLiteSerializedField = value;
                    this.RaisePropertyChanged("compositeTypeLiteSerialized");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeTypeLite", Namespace="http://schemas.datacontract.org/2004/07/WCFTestDate")]
    [System.SerializableAttribute()]
    public partial class CompositeTypeLite : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime horaClienteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime horaServidorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime horaUTCField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan offsetClienteEnClienteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan offsetClienteEnServidorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan offsetClienteRespectoClienteEnServidorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan offsetClienteRespectoServidorEnServidorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan offsetClienteRespectoUTCEnServidorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan offsetServidorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string timeZoneClienteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string timeZoneServidorField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime horaCliente {
            get {
                return this.horaClienteField;
            }
            set {
                if ((this.horaClienteField.Equals(value) != true)) {
                    this.horaClienteField = value;
                    this.RaisePropertyChanged("horaCliente");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime horaServidor {
            get {
                return this.horaServidorField;
            }
            set {
                if ((this.horaServidorField.Equals(value) != true)) {
                    this.horaServidorField = value;
                    this.RaisePropertyChanged("horaServidor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime horaUTC {
            get {
                return this.horaUTCField;
            }
            set {
                if ((this.horaUTCField.Equals(value) != true)) {
                    this.horaUTCField = value;
                    this.RaisePropertyChanged("horaUTC");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan offsetClienteEnCliente {
            get {
                return this.offsetClienteEnClienteField;
            }
            set {
                if ((this.offsetClienteEnClienteField.Equals(value) != true)) {
                    this.offsetClienteEnClienteField = value;
                    this.RaisePropertyChanged("offsetClienteEnCliente");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan offsetClienteEnServidor {
            get {
                return this.offsetClienteEnServidorField;
            }
            set {
                if ((this.offsetClienteEnServidorField.Equals(value) != true)) {
                    this.offsetClienteEnServidorField = value;
                    this.RaisePropertyChanged("offsetClienteEnServidor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan offsetClienteRespectoClienteEnServidor {
            get {
                return this.offsetClienteRespectoClienteEnServidorField;
            }
            set {
                if ((this.offsetClienteRespectoClienteEnServidorField.Equals(value) != true)) {
                    this.offsetClienteRespectoClienteEnServidorField = value;
                    this.RaisePropertyChanged("offsetClienteRespectoClienteEnServidor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan offsetClienteRespectoServidorEnServidor {
            get {
                return this.offsetClienteRespectoServidorEnServidorField;
            }
            set {
                if ((this.offsetClienteRespectoServidorEnServidorField.Equals(value) != true)) {
                    this.offsetClienteRespectoServidorEnServidorField = value;
                    this.RaisePropertyChanged("offsetClienteRespectoServidorEnServidor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan offsetClienteRespectoUTCEnServidor {
            get {
                return this.offsetClienteRespectoUTCEnServidorField;
            }
            set {
                if ((this.offsetClienteRespectoUTCEnServidorField.Equals(value) != true)) {
                    this.offsetClienteRespectoUTCEnServidorField = value;
                    this.RaisePropertyChanged("offsetClienteRespectoUTCEnServidor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan offsetServidor {
            get {
                return this.offsetServidorField;
            }
            set {
                if ((this.offsetServidorField.Equals(value) != true)) {
                    this.offsetServidorField = value;
                    this.RaisePropertyChanged("offsetServidor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string timeZoneCliente {
            get {
                return this.timeZoneClienteField;
            }
            set {
                if ((object.ReferenceEquals(this.timeZoneClienteField, value) != true)) {
                    this.timeZoneClienteField = value;
                    this.RaisePropertyChanged("timeZoneCliente");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string timeZoneServidor {
            get {
                return this.timeZoneServidorField;
            }
            set {
                if ((object.ReferenceEquals(this.timeZoneServidorField, value) != true)) {
                    this.timeZoneServidorField = value;
                    this.RaisePropertyChanged("timeZoneServidor");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WCFTestDateJaponSrv.IWCFTestDate")]
    public interface IWCFTestDate {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFTestDate/Test", ReplyAction="http://tempuri.org/IWCFTestDate/TestResponse")]
        WebTestDateTime.WCFTestDateJaponSrv.CompositeType Test(System.DateTime datetime, System.TimeSpan offset, string timezone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFTestDate/Test", ReplyAction="http://tempuri.org/IWCFTestDate/TestResponse")]
        System.Threading.Tasks.Task<WebTestDateTime.WCFTestDateJaponSrv.CompositeType> TestAsync(System.DateTime datetime, System.TimeSpan offset, string timezone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFTestDate/checkDateTime", ReplyAction="http://tempuri.org/IWCFTestDate/checkDateTimeResponse")]
        System.DateTime checkDateTime(System.DateTime fechIn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFTestDate/checkDateTime", ReplyAction="http://tempuri.org/IWCFTestDate/checkDateTimeResponse")]
        System.Threading.Tasks.Task<System.DateTime> checkDateTimeAsync(System.DateTime fechIn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFTestDate/checkDateTimeForceUTC", ReplyAction="http://tempuri.org/IWCFTestDate/checkDateTimeForceUTCResponse")]
        System.DateTime checkDateTimeForceUTC(System.DateTime fechIn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFTestDate/checkDateTimeForceUTC", ReplyAction="http://tempuri.org/IWCFTestDate/checkDateTimeForceUTCResponse")]
        System.Threading.Tasks.Task<System.DateTime> checkDateTimeForceUTCAsync(System.DateTime fechIn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFTestDate/checkDateTime_JSON", ReplyAction="http://tempuri.org/IWCFTestDate/checkDateTime_JSONResponse")]
        string checkDateTime_JSON(System.DateTime fechIn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFTestDate/checkDateTime_JSON", ReplyAction="http://tempuri.org/IWCFTestDate/checkDateTime_JSONResponse")]
        System.Threading.Tasks.Task<string> checkDateTime_JSONAsync(System.DateTime fechIn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFTestDate/checkDateTimeForceUTC_JSON", ReplyAction="http://tempuri.org/IWCFTestDate/checkDateTimeForceUTC_JSONResponse")]
        string checkDateTimeForceUTC_JSON(System.DateTime fechIn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFTestDate/checkDateTimeForceUTC_JSON", ReplyAction="http://tempuri.org/IWCFTestDate/checkDateTimeForceUTC_JSONResponse")]
        System.Threading.Tasks.Task<string> checkDateTimeForceUTC_JSONAsync(System.DateTime fechIn);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWCFTestDateChannel : WebTestDateTime.WCFTestDateJaponSrv.IWCFTestDate, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WCFTestDateClient : System.ServiceModel.ClientBase<WebTestDateTime.WCFTestDateJaponSrv.IWCFTestDate>, WebTestDateTime.WCFTestDateJaponSrv.IWCFTestDate {
        
        public WCFTestDateClient() {
        }
        
        public WCFTestDateClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WCFTestDateClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WCFTestDateClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WCFTestDateClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public WebTestDateTime.WCFTestDateJaponSrv.CompositeType Test(System.DateTime datetime, System.TimeSpan offset, string timezone) {
            return base.Channel.Test(datetime, offset, timezone);
        }
        
        public System.Threading.Tasks.Task<WebTestDateTime.WCFTestDateJaponSrv.CompositeType> TestAsync(System.DateTime datetime, System.TimeSpan offset, string timezone) {
            return base.Channel.TestAsync(datetime, offset, timezone);
        }
        
        public System.DateTime checkDateTime(System.DateTime fechIn) {
            return base.Channel.checkDateTime(fechIn);
        }
        
        public System.Threading.Tasks.Task<System.DateTime> checkDateTimeAsync(System.DateTime fechIn) {
            return base.Channel.checkDateTimeAsync(fechIn);
        }
        
        public System.DateTime checkDateTimeForceUTC(System.DateTime fechIn) {
            return base.Channel.checkDateTimeForceUTC(fechIn);
        }
        
        public System.Threading.Tasks.Task<System.DateTime> checkDateTimeForceUTCAsync(System.DateTime fechIn) {
            return base.Channel.checkDateTimeForceUTCAsync(fechIn);
        }
        
        public string checkDateTime_JSON(System.DateTime fechIn) {
            return base.Channel.checkDateTime_JSON(fechIn);
        }
        
        public System.Threading.Tasks.Task<string> checkDateTime_JSONAsync(System.DateTime fechIn) {
            return base.Channel.checkDateTime_JSONAsync(fechIn);
        }
        
        public string checkDateTimeForceUTC_JSON(System.DateTime fechIn) {
            return base.Channel.checkDateTimeForceUTC_JSON(fechIn);
        }
        
        public System.Threading.Tasks.Task<string> checkDateTimeForceUTC_JSONAsync(System.DateTime fechIn) {
            return base.Channel.checkDateTimeForceUTC_JSONAsync(fechIn);
        }
    }
}
